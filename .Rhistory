#Get the test cases
new_bins_new_data = read.csv("Datasets/results_diff_algs.csv")
#Get the test cases for each algorithm
alg = list(3)
alg[[1]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 1),]
alg[[2]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 2),]
alg[[3]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 4),]
print(mean(alg[[1]]$xy_error))
print(sd(alg[[1]]$xy_error))
print(mean(alg[[2]]$xy_error))
print(sd(alg[[2]]$xy_error))
print(mean(alg[[3]]$xy_error))
print(sd(alg[[3]]$xy_error))
print(mean(alg[[1]]$xy_error))
print(sd(alg[[1]]$xy_error))
print(mean(alg[[2]]$xy_error))
print(sd(alg[[2]]$xy_error))
print(mean(alg[[3]]$xy_error))
print(sd(alg[[3]]$xy_error))
print(alg[[3]])
#Get the test cases
new_bins_new_data = read.csv("Datasets/results_diff_algs.csv")
#Get the test cases for each algorithm
alg = list(3)
alg[[1]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 1),]
alg[[2]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 2),]
alg[[3]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 3),]
print(alg[[3]])
print(mean(alg[[1]]$xy_error))
print(sd(alg[[1]]$xy_error))
print(mean(alg[[2]]$xy_error))
print(sd(alg[[2]]$xy_error))
print(mean(alg[[3]]$xy_error))
print(sd(alg[[3]]$xy_error))
#Get the test cases
new_bins_new_data = read.csv("Datasets/results_diff_algs.csv")
#Get the test cases for each algorithm
alg = list(3)
alg[[1]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 1),]
alg[[2]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 2),]
alg[[3]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 3),]
print(mean(alg[[1]]$xy_error))
print(sd(alg[[1]]$xy_error))
print(mean(alg[[2]]$xy_error))
print(sd(alg[[2]]$xy_error))
print(mean(alg[[3]]$xy_error))
print(sd(alg[[3]]$xy_error))
new_bins_new_data = read.csv("Datasets/results_diff_algs.csv")
#Get the test cases for each algorithm
alg = list(3)
alg[[1]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 1),]
alg[[2]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 2),]
alg[[3]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 3),]
print(mean(alg[[1]]$xy_error))
print(sd(alg[[1]]$xy_error))
print(mean(alg[[2]]$xy_error))
print(sd(alg[[2]]$xy_error))
print(mean(alg[[3]]$xy_error))
print(sd(alg[[3]]$xy_error))
#Get the test cases
new_bins_new_data = read.csv("Datasets/results_diff_algs.csv")
#Get the test cases for each algorithm
alg = list(3)
alg[[1]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 1),]
alg[[2]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 2),]
alg[[3]] = new_bins_new_data[which(new_bins_new_data$loc_alg == 3),]
print(mean(alg[[1]]$xy_error))
print(sd(alg[[1]]$xy_error))
print(mean(alg[[2]]$xy_error))
print(sd(alg[[2]]$xy_error))
print(mean(alg[[3]]$xy_error))
print(sd(alg[[3]]$xy_error))
compare_algorithms = function(sub, i, j, interval, building)
{
if(nrow(sub[[i]]) == 0)
return()
if(nrow(sub[[j]]) == 0)
return()
t_val = t.test(sub[[i]]$xy_error, sub[[j]]$xy_error, paired=TRUE)
string=paste0("  (algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(sub[[i]]$xy_error - sub[[j]]$xy_error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
compare_new_algorithms = function(alg, interval, building, top_n)
{
sub = list(3)
string=paste0("Algorithm v Algorithm For ", building, " at an interval of ", interval, " seconds\n")
cat(string)
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:3)
{
sub[[i]] = alg[[i]]
sub[[i]] = sub[[i]][which(sub[[i]]$building_true == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$interval == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n == top_n),]
}
#Compare the effectiveness of each algorithm
string="./CompareAlgorithms-"
string=paste0(string, building, "-")
string=paste0(string, "Top", top_n, "-")
string=paste0(string, "Int", interval, ".png")
png(string)
par(mfrow=c(3,3))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:3){
for(j in 1:3) {
compare_algorithms(sub, i, j, interval, building)
}
}
}
compare_new_algorithms(alg, 10, 31, 3)
while(dev.off())
{
}
