sub = sub[which(sub$building == building),]
sub = sub[which(sub$top_n_beacons == top_n),]
for(i in 1:length(intervals))
create_dur_boxplot(sub, intervals[[i]])
}
filename = paste0("./DurVDurBoxPlot-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
create_dur_boxplots(new_bins_new_data, intervals, "SB", 1, 3)
while(dev.off())
{
}
create_dur_boxplot = function(sub, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Int ", i)
if(nrow(sub1) == 0)
return()
boxplot(algorithm~error, data=sub1, main = title, xlab="Error (m)")
}
create_dur_boxplots = function(alg, intervals, building, floor, top_n)
{
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
sub = alg[which(alg$testid != "FAKE_TEST"),]
sub = sub[which(sub$testid != "FAKE_TEST_2"),]
sub = sub[which(sub$testid != "FAKE_TEST_3"),]
sub = sub[which(sub$floor_true == floor),]
sub = sub[which(sub$building == building),]
sub = sub[which(sub$top_n_beacons == top_n),]
for(i in 1:length(intervals))
create_dur_boxplot(sub, intervals[[i]])
}
create_dur_boxplot_file = function(alg, intervals, building, floor, top_n)
{
filename = paste0("./DurVDurBoxPlot-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
create_dur_boxplots(new_bins_new_data, intervals, building, 1, 3)
}
create_dur_boxplot_file(new_bins_new_data, intervals, "SB", 1, 3)
while(dev.off())
{
}
create_dur_boxplot = function(sub, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Int ", i)
if(nrow(sub1) == 0)
return()
boxplot(error~algorithm, data=sub1, main = title, xlab="Algorithm ID", ylab = "Error (m)")
}
create_dur_boxplots = function(alg, intervals, building, floor, top_n)
{
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
sub = alg[which(alg$testid != "FAKE_TEST"),]
sub = sub[which(sub$testid != "FAKE_TEST_2"),]
sub = sub[which(sub$testid != "FAKE_TEST_3"),]
sub = sub[which(sub$floor_true == floor),]
sub = sub[which(sub$building == building),]
sub = sub[which(sub$top_n_beacons == top_n),]
for(i in 1:length(intervals))
create_dur_boxplot(sub, intervals[[i]])
}
create_dur_boxplot_file = function(alg, intervals, building, floor, top_n)
{
filename = paste0("./DurVDurBoxPlot-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
create_dur_boxplots(new_bins_new_data, intervals, building, 1, 3)
}
create_dur_boxplot_file(new_bins_new_data, intervals, "SB", 1, 3)
while(dev.off())
{
}
create_dur_hist = function(sub, alg_id, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Alg ", alg_id, ", Int ", i)
if(nrow(sub1) == 0)
return()
hist(sub1$error, breaks=5, main = title, xlab="Error (m)")
}
create_dur_hists = function(alg, alg_id, intervals, building, floor, top_n)
{
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
sub = alg[[alg_id]]
sub = sub[which(alg$testid != "FAKE_TEST"),]
sub = sub[which(sub$testid != "FAKE_TEST_2"),]
sub = sub[which(sub$testid != "FAKE_TEST_3"),]
sub = sub[which(sub$floor_true == floor),]
sub = sub[which(sub$building == building),]
sub = sub[which(sub$top_n_beacons == top_n),]
filename = paste0("./DurVDurHist-")
filename = paste0(filename, "Alg ", alg_id, "-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
for(i in 1:length(intervals))
create_dur_hist(sub, alg_id, intervals[[i]])
}
create_dur_hists(alg, 1, intervals, "SB", 1, 3)
create_dur_hists(alg, 2, intervals, "SB", 1, 3)
create_dur_hists(alg, 3, intervals, "SB", 1, 3)
create_dur_hists(alg, 4, intervals, "SB", 1, 3)
while(dev.off())
{
}
create_dur_hist = function(sub, alg_id, i)
{
print(nrow(sub))
sub1 = sub[which(sub$duration == i),]
title = paste0("Alg ", alg_id, ", Int ", i)
print(nrow(sub1))
if(nrow(sub1) == 0)
return()
hist(sub1$error, breaks=5, main = title, xlab="Error (m)")
}
create_dur_hists = function(alg, alg_id, intervals, building, floor, top_n)
{
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
sub = alg[[alg_id]]
sub = sub[which(alg$testid != "FAKE_TEST"),]
sub = sub[which(sub$testid != "FAKE_TEST_2"),]
sub = sub[which(sub$testid != "FAKE_TEST_3"),]
sub = sub[which(sub$floor_true == floor),]
sub = sub[which(sub$building == building),]
sub = sub[which(sub$top_n_beacons == top_n),]
filename = paste0("./DurVDurHist-")
filename = paste0(filename, "Alg ", alg_id, "-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
for(i in 1:length(intervals))
create_dur_hist(sub, alg_id, intervals[[i]])
}
create_dur_hists(alg, 1, intervals, "SB", 1, 3)
create_dur_hists(alg, 2, intervals, "SB", 1, 3)
create_dur_hists(alg, 3, intervals, "SB", 1, 3)
create_dur_hists(alg, 4, intervals, "SB", 1, 3)
while(dev.off())
{
}
create_dur_hist = function(sub, alg_id, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Alg ", alg_id, ", Int ", i)
if(nrow(sub1) == 0)
return()
hist(sub1$error, breaks=5, main = title, xlab="Error (m)")
}
create_dur_hists = function(alg, alg_id, intervals, building, floor, top_n)
{
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
sub = alg[[alg_id]]
sub = sub[which(sub$testid != "FAKE_TEST"),]
sub = sub[which(sub$testid != "FAKE_TEST_2"),]
sub = sub[which(sub$testid != "FAKE_TEST_3"),]
sub = sub[which(sub$floor_true == floor),]
sub = sub[which(sub$building == building),]
sub = sub[which(sub$top_n_beacons == top_n),]
filename = paste0("./DurVDurHist-")
filename = paste0(filename, "Alg ", alg_id, "-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
for(i in 1:length(intervals))
create_dur_hist(sub, alg_id, intervals[[i]])
}
create_dur_hists(alg, 1, intervals, "SB", 1, 3)
create_dur_hists(alg, 2, intervals, "SB", 1, 3)
create_dur_hists(alg, 3, intervals, "SB", 1, 3)
create_dur_hists(alg, 4, intervals, "SB", 1, 3)
while(dev.off())
{
}
#Compare new binnning strategy to old binning strategy for an algorithm
compare_bins = function(sub, alg_id)
{
if(nrow(sub[[alg_id]]) == 0)
return()
if(nrow(sub[[alg_id+4]]) == 0)
return()
t_val = t.test(sub[[alg_id]]$error, sub[[alg_id+4]]$error, paired=TRUE)
string=paste0("   (algorithm: ", alg_id, "): \n")
string=paste0(string, "      p Value:                ", t_val$p.value, "\n")
string=paste0(string, "      new_mean:               ", mean(sub[[alg_id]]$error), "\n")
string=paste0(string, "      new_dev:                ", sd(sub[[alg_id]]$error), "\n")
string=paste0(string, "      old_mean:               ", mean(sub[[alg_id+4]]$error), "\n")
string=paste0(string, "      old_dev:                ", sd(sub[[alg_id+4]]$error), "\n")
cat(string)
diff = sub[[alg_id]]$error - sub[[alg_id+4]]$error
hist(diff, breaks=100, main = paste0("Algorithm ", alg_id), xlab="Error Difference (m)")
}
new_v_old_bins = function(alg, interval, building, floor, top_n)
{
sub = list(8)
string=paste0("New Bins V Old For ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
for(i in 1:8)
{
sub[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_2"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_3"),]
sub[[i]] = sub[[i]][which(sub[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
png("./Figure.png")
par(mfrow=c(2,2))
compare_bins(sub, 1)
compare_bins(sub, 2)
compare_bins(sub, 3)
compare_bins(sub, 4)
dev.off()
}
new_v_old_bins(alg, 1, "SB", 1)
new_v_old_bins(alg, 2, "SB", 1)
new_v_old_bins(alg, 3, "SB", 1)
new_v_old_bins(alg, 5, "SB", 1)
new_v_old_bins(alg, 10, "SB", 1)
new_v_old_bins(alg, 1, "SB", 1, 3)
new_v_old_bins(alg, 2, "SB", 1, 3)
new_v_old_bins(alg, 3, "SB", 1, 3)
new_v_old_bins(alg, 5, "SB", 1, 3)
new_v_old_bins(alg, 10, "SB", 1, 3)
compare_algorithms = function(sub, i, j, interval, building, floor)
{
if(nrow(sub[[i]]) == 0)
return()
if(nrow(sub[[j]]) == 0)
return()
t_val = t.test(sub[[i]]$error, sub[[j]]$error, paired=TRUE)
string=paste0("  (floor: ", floor, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(sub[[i]]$error - sub[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
compare_new_algorithms = function(alg, interval, building, floor, top_n)
{
sub = list(4)
string=paste0("Algorithm v Algorithm For ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
sub[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_2"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_3"),]
sub[[i]] = sub[[i]][which(sub[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:4){
for(j in 1:4) {
compare_algorithms(sub, i, j, interval, building, floor)
}
}
}
compare_new_algorithms(alg, 1, "SB", 1, 3)
compare_new_algorithms(alg, 2, "SB", 1, 3)
compare_new_algorithms(alg, 3, "SB", 1, 3)
compare_new_algorithms(alg, 5, "SB", 1, 3)
compare_new_algorithms(alg, 10, "SB", 1, 3)
dev.off()
compare_algorithms = function(sub, i, j, interval, building, floor)
{
if(nrow(sub[[i]]) == 0)
return()
if(nrow(sub[[j]]) == 0)
return()
t_val = t.test(sub[[i]]$error, sub[[j]]$error, paired=TRUE)
string=paste0("  (floor: ", floor, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(sub[[i]]$error - sub[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
compare_new_algorithms = function(alg, interval, building, floor, top_n)
{
sub = list(4)
string=paste0("Algorithm v Algorithm For ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
sub[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_2"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_3"),]
sub[[i]] = sub[[i]][which(sub[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
#Compare the effectiveness of each algorithm
string="./CompareAlgorithms-"
string=paste0(string, building, "-")
string=paste0(string, floor, "-")
string=paste0(string, "Top", top_n, "-")
string=paste0(string, "Int", interval)
png(string)
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:4){
for(j in 1:4) {
compare_algorithms(sub, i, j, interval, building, floor)
}
}
}
compare_new_algorithms(alg, 2, "SB", 1, 3)
compare_new_algorithms(alg, 3, "SB", 1, 3)
compare_new_algorithms(alg, 5, "SB", 1, 3)
compare_new_algorithms(alg, 10, "SB", 1, 3)
while(dev.off())
{
}
compare_algorithms = function(sub, i, j, interval, building, floor)
{
if(nrow(sub[[i]]) == 0)
return()
if(nrow(sub[[j]]) == 0)
return()
t_val = t.test(sub[[i]]$error, sub[[j]]$error, paired=TRUE)
string=paste0("  (floor: ", floor, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(sub[[i]]$error - sub[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
compare_new_algorithms = function(alg, interval, building, floor, top_n)
{
sub = list(4)
string=paste0("Algorithm v Algorithm For ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
sub[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_2"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_3"),]
sub[[i]] = sub[[i]][which(sub[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
#Compare the effectiveness of each algorithm
string="./CompareAlgorithms-"
string=paste0(string, building, "-")
string=paste0(string, floor, "-")
string=paste0(string, "Top", top_n, "-")
string=paste0(string, "Int", interval, ".png")
png(string)
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:4){
for(j in 1:4) {
compare_algorithms(sub, i, j, interval, building, floor)
}
}
}
compare_new_algorithms(alg, 2, "SB", 1, 3)
compare_new_algorithms(alg, 3, "SB", 1, 3)
compare_new_algorithms(alg, 5, "SB", 1, 3)
compare_new_algorithms(alg, 10, "SB", 1, 3)
while(dev.off())
{
}
#Get stats for new binnning strategy and old binning strategy for an algorithm
get_alg_stats_for_int = function(sub, alg_id)
{
if(nrow(sub[[alg_id]]) == 0)
return()
if(nrow(sub[[alg_id+4]]) == 0)
return()
string=paste0("   (algorithm: ", alg_id, "): \n")
string=paste0(string, "      new_mean:               ", mean(sub[[alg_id]]$error), "\n")
string=paste0(string, "      new_dev:                ", sd(sub[[alg_id]]$error), "\n")
string=paste0(string, "      old_mean:               ", mean(sub[[alg_id+4]]$error), "\n")
string=paste0(string, "      old_dev:                ", sd(sub[[alg_id+4]]$error), "\n")
cat(string)
}
#Get stats for an algorithm at a certain interval
get_alg_stats = function(alg, interval, building, floor, top_n)
{
sub = list(8)
string=paste0("Stats for ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
for(i in 1:8)
{
sub[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_2"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_3"),]
sub[[i]] = sub[[i]][which(sub[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
get_alg_stats_for_int(sub, 1)
get_alg_stats_for_int(sub, 2)
get_alg_stats_for_int(sub, 3)
get_alg_stats_for_int(sub, 4)
dev.off()
}
get_alg_stats_for_int(alg, 1, "SB", 1, 3)
get_alg_stats_for_int(alg, 2, "SB", 1, 3)
get_alg_stats_for_int(alg, 3, "SB", 1, 3)
get_alg_stats_for_int(alg, 5, "SB", 1, 3)
get_alg_stats_for_int(alg, 10, "SB", 1, 3)
#Get stats for new binnning strategy and old binning strategy for an algorithm
get_alg_stats_for_int = function(sub, alg_id)
{
if(nrow(sub[[alg_id]]) == 0)
return()
if(nrow(sub[[alg_id+4]]) == 0)
return()
string=paste0("   (algorithm: ", alg_id, "): \n")
string=paste0(string, "      new_mean:               ", mean(sub[[alg_id]]$error), "\n")
string=paste0(string, "      new_dev:                ", sd(sub[[alg_id]]$error), "\n")
string=paste0(string, "      old_mean:               ", mean(sub[[alg_id+4]]$error), "\n")
string=paste0(string, "      old_dev:                ", sd(sub[[alg_id+4]]$error), "\n")
cat(string)
}
#Get stats for an algorithm at a certain interval
get_alg_stats = function(alg, interval, building, floor, top_n)
{
sub = list(8)
string=paste0("Stats for ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
for(i in 1:8)
{
sub[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_2"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_3"),]
sub[[i]] = sub[[i]][which(sub[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
get_alg_stats_for_int(sub, 1)
get_alg_stats_for_int(sub, 2)
get_alg_stats_for_int(sub, 3)
get_alg_stats_for_int(sub, 4)
dev.off()
}
get_alg_stats(alg, 1, "SB", 1, 3)
get_alg_stats(alg, 2, "SB", 1, 3)
get_alg_stats(alg, 3, "SB", 1, 3)
get_alg_stats(alg, 5, "SB", 1, 3)
get_alg_stats(alg, 10, "SB", 1, 3)
clear
