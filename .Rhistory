mean = mean(n_beac_1)
stddev = sqrt(var(n_beac_1))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:num_algorithms){
for(j in 1:num_algorithms) {
n_beac_1 = alg[[i]][which(floor_beac[[i]]$top_n_beacons == 3),]$error
n_beac_2 = alg[[j]][which(floor_beac[[j]]$top_n_beacons == 3),]$error
t_val = t.test(n_beac_1, n_beac_2, paired=TRUE)
string=paste0("(floor: ", 1, ", top n: ", 3, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(n_beac_2 - n_beac_1, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
dev.off()
}
num_algorithms = 4
algorithm = list(num_algorithms)
algorithm[[1]] = read.csv("testresults1_NN.csv")
algorithm[[2]] = read.csv("testresults2_NN.csv")
algorithm[[3]] = read.csv("testresults3_NN.csv")
algorithm[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]$error
}
#Get the mean and std dev of each algorithm
for(i in 1:num_algorithms) {
n_beac_1 = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]$error
mean = mean(n_beac_1)
stddev = sqrt(var(n_beac_1))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
num_algorithms = 4
algorithm = list(num_algorithms)
algorithm[[1]] = read.csv("testresults1_NN.csv")
algorithm[[2]] = read.csv("testresults2_NN.csv")
algorithm[[3]] = read.csv("testresults3_NN.csv")
algorithm[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]$error
}
num_algorithms = 4
algorithm = list(num_algorithms)
algorithm[[1]] = read.csv("testresults1_NN.csv")
algorithm[[2]] = read.csv("testresults2_NN.csv")
algorithm[[3]] = read.csv("testresults3_NN.csv")
algorithm[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
num_algorithms = 4
algorithm = list(num_algorithms)
algorithm[[1]] = read.csv("testresults1_NN.csv")
algorithm[[2]] = read.csv("testresults2_NN.csv")
algorithm[[3]] = read.csv("testresults3_NN.csv")
algorithm[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
num_algorithms = 4
algorithm = list(num_algorithms)
algorithm[[1]] = read.csv("testresults1_NN.csv")
algorithm[[2]] = read.csv("testresults2_NN.csv")
algorithm[[3]] = read.csv("testresults3_NN.csv")
algorithm[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
#alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
#alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
#alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
num_algorithms = 4
algorithm = list(num_algorithms)
algorithm[[1]] = read.csv("testresults1_NN.csv")
algorithm[[2]] = read.csv("testresults2_NN.csv")
algorithm[[3]] = read.csv("testresults3_NN.csv")
algorithm[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
#alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
#alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
algorithm[[1]] = read.csv("testresults1_NN.csv")
num_algorithms = 4
alg = list(num_algorithms)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
#Get the mean and std dev of each algorithm
for(i in 1:num_algorithms) {
mean = mean(alg[[i]]$error)
stddev = sqrt(var(alg[[i]]$error))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:num_algorithms){
for(j in 1:num_algorithms) {
t_val = t.test(alg[[i]]$error, alg[[j]]$error, paired=TRUE)
string=paste0("(floor: ", 1, ", top n: ", 3, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(alg[[i]]$error - alg[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
dev.off()
}
dev.off()
num_algorithms = 4
alg = list(num_algorithms)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
#Get the mean and std dev of each algorithm
for(i in 1:num_algorithms) {
mean = mean(alg[[i]]$error)
stddev = sqrt(var(alg[[i]]$error))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:num_algorithms){
for(j in 1:num_algorithms) {
t_val = t.test(alg[[i]]$error, alg[[j]]$error, paired=TRUE)
string=paste0("(floor: ", 1, ", top n: ", 3, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(alg[[i]]$error - alg[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
dev.off()
}
num_algorithms = 4
alg = list(num_algorithms)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
#Get the mean and std dev of each algorithm
for(i in 1:num_algorithms) {
mean = mean(alg[[i]]$error)
stddev = sqrt(var(alg[[i]]$error))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:num_algorithms){
for(j in 1:num_algorithms) {
print(paste0(i, " " , j))
t_val = t.test(alg[[i]]$error, alg[[j]]$error, paired=TRUE)
string=paste0("(floor: ", 1, ", top n: ", 3, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(alg[[i]]$error - alg[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
dev.off()
}
num_algorithms = 4
alg = list(num_algorithms)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
#Get the mean and std dev of each algorithm
for(i in 1:num_algorithms) {
mean = mean(alg[[i]]$error)
stddev = sqrt(var(alg[[i]]$error))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:num_algorithms){
for(j in 1:num_algorithms) {
t_val = t.test(alg[[i]]$error, alg[[j]]$error, paired=TRUE)
string=paste0("(floor: ", 1, ", top n: ", 3, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(alg[[i]]$error - alg[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
dev.off()
}
num_algorithms = 4
alg = list(num_algorithms)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
#Get the mean and std dev of each algorithm
for(i in 1:num_algorithms) {
mean = mean(alg[[i]]$error)
stddev = sqrt(var(alg[[i]]$error))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:num_algorithms){
for(j in 1:num_algorithms) {
t_val = t.test(alg[[i]]$error, alg[[j]]$error, paired=TRUE)
string=paste0("(floor: ", 1, ", top n: ", 3, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
#cat(string)
hist(alg[[i]]$error - alg[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
dev.off()
}
num_algorithms = 4
alg = list(num_algorithms)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
#Get the mean and std dev of each algorithm
for(i in 1:num_algorithms) {
mean = mean(alg[[i]]$error)
stddev = sqrt(var(alg[[i]]$error))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:num_algorithms){
for(j in 1:num_algorithms) {
t_val = t.test(alg[[i]]$error, alg[[j]]$error, paired=TRUE)
string=paste0("(floor: ", 1, ", top n: ", 3, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(alg[[i]]$error - alg[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
#dev.off()
}
num_algorithms = 4
alg = list(num_algorithms)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with top 3 beacons
for(i in 1:4)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$floor_true == 1),]
alg[[i]] = alg[[i]][which(alg[[i]]$building == "SB"),]
alg[[i]] = alg[[i]][which(alg[[i]]$top_n_beacons == 3),]
}
#Get the mean and std dev of each algorithm
for(i in 1:num_algorithms) {
mean = mean(alg[[i]]$error)
stddev = sqrt(var(alg[[i]]$error))
string=paste0("(floor: ", 1, ", algorithm: ", i, "): \n")
string=paste0(string, "   mean 1:               ", mean, "\n")
string=paste0(string, "   standard deviation 1: ", stddev, "\n")
cat(string)
}
#Compare the effectiveness of each algorithm
png("./Effectiveness.png")
par(mfrow=c(4,4))
#Compare the effectiveness of algorithm i against algorithm j
for(i in 1:num_algorithms){
for(j in 1:num_algorithms) {
t_val = t.test(alg[[i]]$error, alg[[j]]$error, paired=TRUE)
string=paste0("(floor: ", 1, ", algorithms: ", i, " and ", j, "): \n")
string=paste0(string, "   p Value:                ", t_val$p.value, "\n")
cat(string)
hist(alg[[i]]$error - alg[[j]]$error, main = paste0(i, " v ", j), xlab="Error Difference (m)")
}
#dev.off()
}
dev.off()
alg = list(4)
alg = list(4)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
alg = list(4)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
alg = list(4)
alg[[1]] = read.csv("testresults1_NN.csv")
alg[[2]] = read.csv("testresults2_NN.csv")
alg[[3]] = read.csv("testresults3_NN.csv")
alg[[4]] = read.csv("testresults4_NN.csv")
intervals = list(4)
intervals[[1]] = 2
intervals[[2]] = 3
intervals[[3]] = 5
intervals[[4]] = 10
create_dur_boxplot = function(sub, alg_id, i)
{
sub1 = sub[[alg_id]][which(sub[[alg_id]]$duration == i),]
title = paste0("Alg ", alg_id, ", Int ", i)
if(nrow(sub1) == 0)
return()
boxplot(data=sub1$error, main = title, xlab="Error (m)")
}
create_dur_boxplots = function(alg, alg_id, intervals, building, floor, top_n)
{
sub = list(length(alg))
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
for(i in 1:length(alg))
{
sub[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_2"),]
sub[[i]] = sub[[i]][which(sub[[i]]$testid != "FAKE_TEST_3"),]
sub[[i]] = sub[[i]][which(sub[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
filename = paste0("./DurVDurBoxPlot-")
filename = paste0(filename, "Alg ", alg_id, "-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
for(i in 1:length(intervals))
create_dur_boxplot(sub, alg_id, intervals[[i]])
}
create_dur_boxplots(alg, 1, intervals, "SB", 1, 3)
create_dur_boxplots(alg, 2, intervals, "SB", 1, 3)
create_dur_boxplots(alg, 3, intervals, "SB", 1, 3)
create_dur_boxplots(alg, 4, intervals, "SB", 1, 3)
while(dev.off())
{
}
