sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
get_alg_stats_for_int(sub, int_id, 1)
get_alg_stats_for_int(sub, int_id, 2)
get_alg_stats_for_int(sub, int_id, 3)
get_alg_stats_for_int(sub, int_id, 4)
}
get_alg_stats(alg, 2, 1, "SB", 1, 3)
get_alg_stats(alg, 3, 2, "SB", 1, 3)
get_alg_stats(alg, 5, 3, "SB", 1, 3)
get_alg_stats(alg, 10, 4, "SB", 1, 3)
create_dur_boxplot = function(sub, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Int ", i)
if(nrow(sub1) == 0)
return()
boxplot(error~algorithm, data=sub1, main = title, xlab="Algorithm ID", ylab = "Error (m)")
}
create_dur_boxplots = function(alg, intervals, building, floor, top_n)
{
#Only select observations from floor 1
sub = alg[which(alg$floor_true == floor),]
#Only select observations from SB
sub = sub[which(sub$building == building),]
#Only select observations where top_n beacons were used in the location approximation
sub = sub[which(sub$top_n_beacons == top_n),]
for(i in 1:length(intervals))
create_dur_boxplot(sub, intervals[[i]])
print(sub)
}
create_dur_boxplot_file = function(alg, intervals, building, floor, top_n)
{
filename = paste0("./DurVDurBoxPlot-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
print(filename)
png(filename)
par(mfrow=c(2,2))
create_dur_boxplots(new_bins_new_data, intervals, building, 1, 3)
}
create_dur_boxplot_file(new_bins_new_data, intervals, "SB", 1, 3)
while(dev.off())
{
}
for(i in 1:8)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$x_true < 8),]
alg[[i]] = alg[[i]][which(alg[[i]]$y_true > 15),]
}
#Recreate the master data frames
new_bins_new_data = alg[[1]]
old_bins_new_data = alg[[5]]
for(i in 2:4) {
new_bins_new_data = rbind(new_bins_new_data, alg[[i]])
old_bins_new_data = rbind(old_bins_new_data, alg[[i+4]])
}
#Get the test cases
new_bins_new_data = read.csv("testresults_NN.csv")
old_bins_new_data = read.csv("testresults_ON.csv")
#Get the test cases for each algorithm
alg = list(8)
alg[[1]] = new_bins_new_data[which(new_bins_new_data$algorithm == 1),]
alg[[2]] = new_bins_new_data[which(new_bins_new_data$algorithm == 2),]
alg[[3]] = new_bins_new_data[which(new_bins_new_data$algorithm == 3),]
alg[[4]] = new_bins_new_data[which(new_bins_new_data$algorithm == 4),]
alg[[5]] = old_bins_new_data[which(old_bins_new_data$algorithm == 1),]
alg[[6]] = old_bins_new_data[which(old_bins_new_data$algorithm == 2),]
alg[[7]] = old_bins_new_data[which(old_bins_new_data$algorithm == 3),]
alg[[8]] = old_bins_new_data[which(old_bins_new_data$algorithm == 4),]
#The list of the different scan periods
intervals = list(4)
intervals[[1]] = 2
intervals[[2]] = 3
intervals[[3]] = 5
intervals[[4]] = 10
for(i in 1:8)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$x_true > 8),]
alg[[i]] = alg[[i]][which(alg[[i]]$y_true > 15),]
}
#Recreate the master data frames
new_bins_new_data = alg[[1]]
old_bins_new_data = alg[[5]]
for(i in 2:4) {
new_bins_new_data = rbind(new_bins_new_data, alg[[i]])
old_bins_new_data = rbind(old_bins_new_data, alg[[i+4]])
}
assign("means", matrix(1:32, nrow=8, ncol=4), envir=.GlobalEnv)
assign("sds", matrix(1:32, nrow=8, ncol=4), envir=.GlobalEnv)
#Get stats for new binnning strategy and old binning strategy for an algorithm
get_alg_stats_for_int = function(sub, int_id, alg_id)
{
if(nrow(sub[[alg_id]]) == 0)
return()
if(nrow(sub[[alg_id+4]]) == 0)
return()
means[[alg_id, int_id]] = mean(sub[[alg_id]]$error)
sds[[alg_id, int_id]] = sd(sub[[alg_id]]$error)
means[[alg_id+4, int_id]] = mean(sub[[alg_id+4]]$error)
sds[[alg_id+4, int_id]] = sd(sub[[alg_id+4]]$error)
assign("means", means, envir=.GlobalEnv,inherits=TRUE)
assign("sds", sds, envir=.GlobalEnv, inherits=TRUE)
string=paste0("   (algorithm:", alg_id, "): \n")
string=paste0(string, "      new_mean:               ", means[[alg_id, int_id]], "\n")
string=paste0(string, "      new_dev:                ", sds[[alg_id, int_id]], "\n")
string=paste0(string, "      old_mean:               ", means[[alg_id+4, int_id]], "\n")
string=paste0(string, "      old_dev:                ", sds[[alg_id+4, int_id]], "\n")
cat(string)
}
#Get stats for an algorithm at a certain interval
get_alg_stats = function(alg, interval, int_id, building, floor, top_n)
{
sub = list(8)
string=paste0("Stats for ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
for(i in 1:8)
{
sub[[i]] = alg[[i]][which(alg[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
get_alg_stats_for_int(sub, int_id, 1)
get_alg_stats_for_int(sub, int_id, 2)
get_alg_stats_for_int(sub, int_id, 3)
get_alg_stats_for_int(sub, int_id, 4)
}
get_alg_stats(alg, 2, 1, "SB", 1, 3)
get_alg_stats(alg, 3, 2, "SB", 1, 3)
get_alg_stats(alg, 5, 3, "SB", 1, 3)
get_alg_stats(alg, 10, 4, "SB", 1, 3)
create_dur_boxplot = function(sub, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Int ", i)
if(nrow(sub1) == 0)
return()
boxplot(error~algorithm, data=sub1, main = title, xlab="Algorithm ID", ylab = "Error (m)")
}
create_dur_boxplots = function(alg, intervals, building, floor, top_n)
{
#Only select observations from floor 1
sub = alg[which(alg$floor_true == floor),]
#Only select observations from SB
sub = sub[which(sub$building == building),]
#Only select observations where top_n beacons were used in the location approximation
sub = sub[which(sub$top_n_beacons == top_n),]
for(i in 1:length(intervals))
create_dur_boxplot(sub, intervals[[i]])
}
create_dur_boxplot_file = function(alg, intervals, building, floor, top_n)
{
filename = paste0("./DurVDurBoxPlot-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
print(filename)
png(filename)
par(mfrow=c(2,2))
create_dur_boxplots(new_bins_new_data, intervals, building, 1, 3)
}
create_dur_boxplot_file(new_bins_new_data, intervals, "SB", 1, 3)
while(dev.off())
{
}
for(i in 1:8)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "Test23777"),]
alg[[i]] = alg[[i]][which(alg[[i]]$x_true > 8),]
alg[[i]] = alg[[i]][which(alg[[i]]$y_true > 15),]
}
#Recreate the master data frames
new_bins_new_data = alg[[1]]
old_bins_new_data = alg[[5]]
for(i in 2:4) {
new_bins_new_data = rbind(new_bins_new_data, alg[[i]])
old_bins_new_data = rbind(old_bins_new_data, alg[[i+4]])
}
assign("means", matrix(1:32, nrow=8, ncol=4), envir=.GlobalEnv)
assign("sds", matrix(1:32, nrow=8, ncol=4), envir=.GlobalEnv)
#Get stats for new binnning strategy and old binning strategy for an algorithm
get_alg_stats_for_int = function(sub, int_id, alg_id)
{
if(nrow(sub[[alg_id]]) == 0)
return()
if(nrow(sub[[alg_id+4]]) == 0)
return()
means[[alg_id, int_id]] = mean(sub[[alg_id]]$error)
sds[[alg_id, int_id]] = sd(sub[[alg_id]]$error)
means[[alg_id+4, int_id]] = mean(sub[[alg_id+4]]$error)
sds[[alg_id+4, int_id]] = sd(sub[[alg_id+4]]$error)
assign("means", means, envir=.GlobalEnv,inherits=TRUE)
assign("sds", sds, envir=.GlobalEnv, inherits=TRUE)
string=paste0("   (algorithm:", alg_id, "): \n")
string=paste0(string, "      new_mean:               ", means[[alg_id, int_id]], "\n")
string=paste0(string, "      new_dev:                ", sds[[alg_id, int_id]], "\n")
string=paste0(string, "      old_mean:               ", means[[alg_id+4, int_id]], "\n")
string=paste0(string, "      old_dev:                ", sds[[alg_id+4, int_id]], "\n")
cat(string)
}
#Get stats for an algorithm at a certain interval
get_alg_stats = function(alg, interval, int_id, building, floor, top_n)
{
sub = list(8)
string=paste0("Stats for ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
for(i in 1:8)
{
sub[[i]] = alg[[i]][which(alg[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
get_alg_stats_for_int(sub, int_id, 1)
get_alg_stats_for_int(sub, int_id, 2)
get_alg_stats_for_int(sub, int_id, 3)
get_alg_stats_for_int(sub, int_id, 4)
}
get_alg_stats(alg, 2, 1, "SB", 1, 3)
get_alg_stats(alg, 3, 2, "SB", 1, 3)
get_alg_stats(alg, 5, 3, "SB", 1, 3)
get_alg_stats(alg, 10, 4, "SB", 1, 3)
create_dur_boxplot = function(sub, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Int ", i)
if(nrow(sub1) == 0)
return()
boxplot(error~algorithm, data=sub1, main = title, xlab="Algorithm ID", ylab = "Error (m)")
}
create_dur_boxplots = function(alg, intervals, building, floor, top_n)
{
#Only select observations from floor 1
sub = alg[which(alg$floor_true == floor),]
#Only select observations from SB
sub = sub[which(sub$building == building),]
#Only select observations where top_n beacons were used in the location approximation
sub = sub[which(sub$top_n_beacons == top_n),]
for(i in 1:length(intervals))
create_dur_boxplot(sub, intervals[[i]])
}
create_dur_boxplot_file = function(alg, intervals, building, floor, top_n)
{
filename = paste0("./DurVDurBoxPlot-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
print(filename)
png(filename)
par(mfrow=c(2,2))
create_dur_boxplots(new_bins_new_data, intervals, building, 1, 3)
}
create_dur_boxplot_file(new_bins_new_data, intervals, "SB", 1, 3)
while(dev.off())
{
}
#Get the test cases
new_bins_new_data = read.csv("testresults_NN.csv")
old_bins_new_data = read.csv("testresults_ON.csv")
#Get the test cases for each algorithm
alg = list(8)
alg[[1]] = new_bins_new_data[which(new_bins_new_data$algorithm == 1),]
alg[[2]] = new_bins_new_data[which(new_bins_new_data$algorithm == 2),]
alg[[3]] = new_bins_new_data[which(new_bins_new_data$algorithm == 3),]
alg[[4]] = new_bins_new_data[which(new_bins_new_data$algorithm == 4),]
alg[[5]] = old_bins_new_data[which(old_bins_new_data$algorithm == 1),]
alg[[6]] = old_bins_new_data[which(old_bins_new_data$algorithm == 2),]
alg[[7]] = old_bins_new_data[which(old_bins_new_data$algorithm == 3),]
alg[[8]] = old_bins_new_data[which(old_bins_new_data$algorithm == 4),]
#The list of the different scan periods
intervals = list(4)
intervals[[1]] = 2
intervals[[2]] = 3
intervals[[3]] = 5
intervals[[4]] = 10
for(i in 1:8)
{
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_2"),]
alg[[i]] = alg[[i]][which(alg[[i]]$testid != "FAKE_TEST_3"),]
alg[[i]] = alg[[i]][which(alg[[i]]$error < 20),]
}
#Recreate the master data frames
new_bins_new_data = alg[[1]]
old_bins_new_data = alg[[5]]
for(i in 2:4) {
new_bins_new_data = rbind(new_bins_new_data, alg[[i]])
old_bins_new_data = rbind(old_bins_new_data, alg[[i+4]])
}
assign("means", matrix(1:32, nrow=8, ncol=4), envir=.GlobalEnv)
assign("sds", matrix(1:32, nrow=8, ncol=4), envir=.GlobalEnv)
#Get stats for new binnning strategy and old binning strategy for an algorithm
get_alg_stats_for_int = function(sub, int_id, alg_id)
{
if(nrow(sub[[alg_id]]) == 0)
return()
if(nrow(sub[[alg_id+4]]) == 0)
return()
means[[alg_id, int_id]] = mean(sub[[alg_id]]$error)
sds[[alg_id, int_id]] = sd(sub[[alg_id]]$error)
means[[alg_id+4, int_id]] = mean(sub[[alg_id+4]]$error)
sds[[alg_id+4, int_id]] = sd(sub[[alg_id+4]]$error)
assign("means", means, envir=.GlobalEnv,inherits=TRUE)
assign("sds", sds, envir=.GlobalEnv, inherits=TRUE)
string=paste0("   (algorithm:", alg_id, "): \n")
string=paste0(string, "      new_mean:               ", means[[alg_id, int_id]], "\n")
string=paste0(string, "      new_dev:                ", sds[[alg_id, int_id]], "\n")
string=paste0(string, "      old_mean:               ", means[[alg_id+4, int_id]], "\n")
string=paste0(string, "      old_dev:                ", sds[[alg_id+4, int_id]], "\n")
cat(string)
}
#Get stats for an algorithm at a certain interval
get_alg_stats = function(alg, interval, int_id, building, floor, top_n)
{
sub = list(8)
string=paste0("Stats for ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
for(i in 1:8)
{
sub[[i]] = alg[[i]][which(alg[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
get_alg_stats_for_int(sub, int_id, 1)
get_alg_stats_for_int(sub, int_id, 2)
get_alg_stats_for_int(sub, int_id, 3)
get_alg_stats_for_int(sub, int_id, 4)
}
get_alg_stats(alg, 2, 1, "SB", 1, 3)
get_alg_stats(alg, 3, 2, "SB", 1, 3)
get_alg_stats(alg, 5, 3, "SB", 1, 3)
get_alg_stats(alg, 10, 4, "SB", 1, 3)
create_dur_boxplot = function(sub, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Int ", i)
if(nrow(sub1) == 0)
return()
boxplot(error~algorithm, data=sub1, main = title, xlab="Algorithm ID", ylab = "Error (m)")
}
create_dur_boxplots = function(alg, intervals, building, floor, top_n)
{
#Only select observations from floor 1
sub = alg[which(alg$floor_true == floor),]
#Only select observations from SB
sub = sub[which(sub$building == building),]
#Only select observations where top_n beacons were used in the location approximation
sub = sub[which(sub$top_n_beacons == top_n),]
for(i in 1:length(intervals))
create_dur_boxplot(sub, intervals[[i]])
}
create_dur_boxplot_file = function(alg, intervals, building, floor, top_n)
{
filename = paste0("./DurVDurBoxPlot-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
print(filename)
png(filename)
par(mfrow=c(2,2))
create_dur_boxplots(new_bins_new_data, intervals, building, 1, 3)
}
create_dur_boxplot_file(new_bins_new_data, intervals, "SB", 1, 3)
while(dev.off())
{
}
assign("means", matrix(1:32, nrow=8, ncol=4), envir=.GlobalEnv)
assign("sds", matrix(1:32, nrow=8, ncol=4), envir=.GlobalEnv)
#Get stats for new binnning strategy and old binning strategy for an algorithm
get_alg_stats_for_int = function(sub, int_id, alg_id)
{
if(nrow(sub[[alg_id]]) == 0)
return()
if(nrow(sub[[alg_id+4]]) == 0)
return()
means[[alg_id, int_id]] = mean(sub[[alg_id]]$error)
sds[[alg_id, int_id]] = sd(sub[[alg_id]]$error)
means[[alg_id+4, int_id]] = mean(sub[[alg_id+4]]$error)
sds[[alg_id+4, int_id]] = sd(sub[[alg_id+4]]$error)
assign("means", means, envir=.GlobalEnv,inherits=TRUE)
assign("sds", sds, envir=.GlobalEnv, inherits=TRUE)
string=paste0("   (algorithm:", alg_id, "): \n")
string=paste0(string, "      new_mean:               ", means[[alg_id, int_id]], "\n")
string=paste0(string, "      new_dev:                ", sds[[alg_id, int_id]], "\n")
string=paste0(string, "      old_mean:               ", means[[alg_id+4, int_id]], "\n")
string=paste0(string, "      old_dev:                ", sds[[alg_id+4, int_id]], "\n")
cat(string)
}
#Get stats for an algorithm at a certain interval
get_alg_stats = function(alg, interval, int_id, building, floor, top_n)
{
sub = list(8)
string=paste0("Stats for ", building, " floor ", floor, " at an interval of ", interval, " seconds\n")
cat(string)
#Remove FAKE_TEST, FAKE_TEST_1, and FAKE_TEST_2
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
for(i in 1:8)
{
sub[[i]] = alg[[i]][which(alg[[i]]$floor_true == floor),]
sub[[i]] = sub[[i]][which(sub[[i]]$building == building),]
sub[[i]] = sub[[i]][which(sub[[i]]$duration == interval),]
sub[[i]] = sub[[i]][which(sub[[i]]$top_n_beacons == top_n),]
}
get_alg_stats_for_int(sub, int_id, 1)
get_alg_stats_for_int(sub, int_id, 2)
get_alg_stats_for_int(sub, int_id, 3)
get_alg_stats_for_int(sub, int_id, 4)
}
get_alg_stats(alg, 2, 1, "SB", 1, 3)
get_alg_stats(alg, 3, 2, "SB", 1, 3)
get_alg_stats(alg, 5, 3, "SB", 1, 3)
get_alg_stats(alg, 10, 4, "SB", 1, 3)
create_dur_hist = function(sub, alg_id, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Alg ", alg_id, ", Int ", i)
if(nrow(sub1) == 0)
return()
hist(sub1$error, breaks=5, main = title, xlab="Error (m)")
}
create_dur_hists = function(alg, alg_id, intervals, building, floor, top_n)
{
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
sub = alg[[alg_id]]
sub = sub[which(sub$floor_true == floor),]
sub = sub[which(sub$building == building),]
sub = sub[which(sub$top_n_beacons == top_n),]
filename = paste0("./DurVDurHist-")
filename = paste0(filename, "Alg ", alg_id, "-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
for(i in 1:length(intervals))
create_dur_hist(sub, alg_id, intervals[[i]])
}
create_dur_hists(alg, 1, intervals, "SB", 1, 3)
create_dur_hists(alg, 2, intervals, "SB", 1, 3)
create_dur_hists(alg, 3, intervals, "SB", 1, 3)
create_dur_hists(alg, 4, intervals, "SB", 1, 3)
while(dev.off())
{
}
create_dur_hist = function(sub, alg_id, i)
{
sub1 = sub[which(sub$duration == i),]
title = paste0("Alg ", alg_id, ", Int ", i)
if(nrow(sub1) == 0)
return()
hist(sub1$error, breaks=8, main = title, xlab="Error (m)")
}
create_dur_hists = function(alg, alg_id, intervals, building, floor, top_n)
{
#Only select observations from floor 1
#Only select observations from SB
#Only select observations with a duration of interval seconds
#Only select observations where top_n beacons were used in the location approximation
sub = alg[[alg_id]]
sub = sub[which(sub$floor_true == floor),]
sub = sub[which(sub$building == building),]
sub = sub[which(sub$top_n_beacons == top_n),]
filename = paste0("./DurVDurHist-")
filename = paste0(filename, "Alg ", alg_id, "-")
filename = paste0(filename, "Build ", building, "-")
filename = paste0(filename, "Floor ", floor, "-")
filename = paste0(filename, "TopN ", top_n, ".png")
png(filename)
par(mfrow=c(2,2))
for(i in 1:length(intervals))
create_dur_hist(sub, alg_id, intervals[[i]])
}
create_dur_hists(alg, 1, intervals, "SB", 1, 3)
create_dur_hists(alg, 2, intervals, "SB", 1, 3)
create_dur_hists(alg, 3, intervals, "SB", 1, 3)
create_dur_hists(alg, 4, intervals, "SB", 1, 3)
while(dev.off())
{
}
